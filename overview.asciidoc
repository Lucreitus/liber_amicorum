== Overview

Creative Coding. Software Art. It's a pan-disciplinary field so new that those working in it haven't yet settled on a name. Practitioners are artists, designers, sculptors, computer scientists, vision researchers, hardware hackers--anyone who makes art through the creative application of technology. 

Vade Mecum is a collaborative, community-driven project to map the state of the art and create a useful resource for both new and experienced software artists. Andrew Odewahn of O'Reilly Media, Isabel Draves of LISA (Leaders in Software and Art), and select members of the community will serve as curators. It  will operate as open source project on GitHub, and be maintained by O'Reilly. Through Vade Mecum, we aim to:

* Create a resource--equal parts inspiration, guide, and catalog--that maps this emerging space, advances practitioners'understanding of it, and shows that there's a there there.
* Document inspirational projects--not only the amazing finished product, but the workflow, tools, and hacks the artist used in the process of creating it.
* Help practitioners identify and find each other.
* Surface and address practitioners' pain points and stumbling blocks. For example, what happens when an artist's creative vision is held up by a lack of technical or mathematical knowledge?
* Explore the use of GitHub as a tool for collaborative authoring. How does this new platform, which has fueled community-driven innovation in the software world, serve the creative community?

We'll publish Vade Mecum periodically as a PDF, on the iBookstore, on the Kindle, and, in the not-too-distant future, on the web.  

[NOTE]
====
And that title? A vade mecum (vay-dee mee-cum) is:

1. a book for ready reference; a manual
2. something regularly carried about by a person
We thought that was a pretty good description of this thing (and we like it better than "guide" or "directory").
====


=== What We're Looking For

* Useful tools or techniques
* Inspirational projects
* Hands-on tutorials or articles
* Sites and resources of interest to practitioners
* Key people or organizations

=== How to Contribute

The simplest way to get started is to follow the project on GitHub so that you'll be notified of changes to the document. If you don't have a GitHub account, it's easy and free to set up. And if you're wondering, "Why GitHub?," Clay Shirky explains its transformative superpowers in hi talk link::http://www.youtube.com/watch?v=CEN4XNth61o[How the Internet will (one day) transform government].


////
*[ANDREW: this needs more definition/explanation or a pointer to a how-to--it will scare off GitHub newbies without that]*
////

To contribute to Vade Mecum:

* Fork the repository 
* Add your changes
* Send a pull request

We'll use the feedback and discussion generated from the pull request to decide whether to merge the request and generate a fresh version of the guide.

=== License

The guide is licensed under the Creative Commons Attribution-NonCommercial 3.0 Unported License. You are free to share and remix the book, as long as you provide attribution and do not attempt to re-sell.

=== Areas / Fields

We're interested primarily in these areas:

* 3D graphics
* Algorithmic and Generative Art
* Animation
* App Design
* Circuit Bending
* Data visualization
* Electromechanical sculpture
* Interaction Design
* LED design
* Musical / Sound Arts
* Physical Computing

Please note that we're not seeking to _define_ these areas in particular -- that's better done on Wikipedia or similar sites.  We're interested mainly in identifying trends, tools, people, and projects that are advancing the state of the art in the field.

=== Organizations and Events

The usual suspects are below. What else?

* ITP
* CMU program
* MIT Media Lab
* LISA
* Guggenheim
* SIGGRAPH

=== Tools

* 3d printers
* arduino
* cinder
* openFrameworks
* Max/MSP
* processing
* 3D modeling tools
* kinect
* openCV

For each tool:

* Description and link
* Useful resources and guides (blogs, books, etc)
* Key practitioners
* Examples and/or tutorials that provide examples / algorithms that describe technologies or obstacles.


=== Projects

The goal of the projects section is to articulate the vision and thoughts that go into creating an interesting work or solving an interesting problem, with a particular focus on the project's relevance compared to other computational / serial artists or projects.  

We're much more interested in the "why's" of the project -- why did you pick certain tools, why did you take the approach, why is this different than what's come before -- before the "how's".  (But, don't worry -- you can put the How's in the tutorial or example sections.)  The project descriptions should serve as a guide of your thinking for people who will follow after you.  

* What was the project?
* What areas or field does it fall in?
* What tools did you use?
* Why was this an interesting project to you -- what was new or innovative?
* What were the key challenges you had to overcome?
* Your name and a brief bio

